#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–π–ª–æ–≤ —Å wplace.live –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º,
—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–µ–∑–∫–æ–π –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import os
import time
from io import BytesIO
import requests
from PIL import Image
from datetime import datetime
from zoneinfo import ZoneInfo
import concurrent.futures
import logging
from config import *

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BASE_URL = "https://backend.wplace.live/files/s0/tiles/{x}/{y}.png"

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def download_image(url, timeout=30, retries=5, backoff_seconds=1.5):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    """
    last_error = None
    for attempt in range(1, retries + 1):
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {url}")
            response = requests.get(url, timeout=timeout, stream=True)
            response.raise_for_status()
            content = response.content
            image = Image.open(BytesIO(content))
            image.load()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {url}")
            return image
        except requests.exceptions.RequestException as e:
            last_error = e
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
        except Exception as e:
            last_error = e
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
        
        if attempt < retries:
            time.sleep(backoff_seconds * attempt)
            
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫: {last_error}")
    return None

def save_image(image, output_dir="output"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π.
    """
    try:
        os.makedirs(output_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        try:
            SCRIPT_TZ = ZoneInfo(TIMEZONE)
        except Exception:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{TIMEZONE}'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC.")
            SCRIPT_TZ = ZoneInfo("UTC")

        today = datetime.now(SCRIPT_TZ).strftime("%Y%m%d")
        today_folder = os.path.join(output_dir, today)
        os.makedirs(today_folder, exist_ok=True)
        
        timestamp = datetime.now(SCRIPT_TZ).strftime("%Y%m%d_%H%M%S")
        filename = f"merged_tiles_{timestamp}.png"
        filepath = os.path.join(today_folder, filename)
        
        image.save(filepath, "PNG", optimize=True, compress_level=9)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        return filepath
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def download_and_crop_area(tl_x, tl_y, tl_px_x, tl_px_y, br_x, br_y, br_px_x, br_px_y):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç, –æ–±—Ä–µ–∑–∞–µ—Ç –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å.
    
    Args:
        tl_x (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        tl_y (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        tl_px_x (int): –ü–∏–∫—Å–µ–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        tl_px_y (int): –ü–∏–∫—Å–µ–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        br_x (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        br_y (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        br_px_x (int): –ü–∏–∫—Å–µ–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≤–Ω—É—Ç—Ä–∏ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —Ç–∞–π–ª–∞.
        br_px_y (int): –ü–∏–∫—Å–µ–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤–Ω—É—Ç—Ä–∏ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —Ç–∞–π–ª–∞.
    """
    logger.info(f"–ó–∞–¥–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
    logger.info(f"  –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª: –¢–∞–π–ª({tl_x}, {tl_y}), –ü–∏–∫—Å–µ–ª—å({tl_px_x}, {tl_px_y})")
    logger.info(f"  –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª: –¢–∞–π–ª({br_x}, {br_y}), –ü–∏–∫—Å–µ–ª—å({br_px_x}, {br_px_y})")

    # --- 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
    tile_coords_to_download = []
    for y in range(tl_y, br_y + 1):
        row_coords = []
        for x in range(tl_x, br_x + 1):
            row_coords.append({'x': x, 'y': y, 'url': BASE_URL.format(x=x, y=y)})
        tile_coords_to_download.append(row_coords)

    if not tile_coords_to_download:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
        return False

    grid_size_y = len(tile_coords_to_download)
    grid_size_x = len(tile_coords_to_download[0])
    total_tiles = grid_size_x * grid_size_y
    logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å {total_tiles} —Ç–∞–π–ª–æ–≤ (—Å–µ—Ç–∫–∞ {grid_size_x}x{grid_size_y})")

    # --- 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–ª–æ–≤ ---
    merged_image_size = (grid_size_x * 1000, grid_size_y * 1000)
    merged_image = Image.new('RGBA', merged_image_size, (0, 0, 0, 0))
    
    failed_tiles = []
    successful_tiles = 0

    with concurrent.futures.ThreadPoolExecutor(max_workers=total_tiles) as executor:
        future_to_tile = {
            executor.submit(download_image, tile['url']): tile
            for row in tile_coords_to_download for tile in row
        }

        for future in concurrent.futures.as_completed(future_to_tile):
            tile_info = future_to_tile[future]
            try:
                tile_image = future.result()
                if tile_image:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    col_index = tile_info['x'] - tl_x
                    row_index = tile_info['y'] - tl_y
                    paste_x = col_index * 1000
                    paste_y = row_index * 1000
                    
                    if tile_image.mode != 'RGBA':
                        tile_image = tile_image.convert('RGBA')

                    merged_image.paste(tile_image, (paste_x, paste_y), tile_image)
                    successful_tiles += 1
                    logger.info(f"‚úÖ –¢–∞–π–ª ({tile_info['x']},{tile_info['y']}) –≤—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å: {successful_tiles}/{total_tiles}")
                else:
                    failed_tiles.append(tile_info['url'])
            except Exception as e:
                failed_tiles.append(tile_info['url'])
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–ª–∞ {tile_info['url']}: {e}")

    if failed_tiles:
        logger.error(f"‚ùå –ó–ê–ì–†–£–ó–ö–ê –ù–ï–£–î–ê–ß–ù–ê: {len(failed_tiles)} –∏–∑ {total_tiles} —Ç–∞–π–ª–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        for url in failed_tiles:
            logger.error(f"  - {url}")
        return False
    
    logger.info("‚úÖ –í—Å–µ —Ç–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.")

    # --- 3. –û–±—Ä–µ–∑–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    left = tl_px_x
    upper = tl_px_y
    right = (br_x - tl_x) * 1000 + br_px_x
    lower = (br_y - tl_y) * 1000 + br_px_y

    logger.info(f"–í—ã—á–∏—Å–ª—è—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏: ({left}, {upper}, {right}, {lower})")
    cropped_image = merged_image.crop((left, upper, right, lower))
    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–æ. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {cropped_image.size}")

    # --- 4. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    final_size = (cropped_image.width * SCALE_FACTOR, cropped_image.height * SCALE_FACTOR)
    logger.info(f"–ú–∞—Å—à—Ç–∞–±–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {final_size} (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {SCALE_FACTOR}x)")
    scaled_image = cropped_image.resize(final_size, Image.Resampling.NEAREST)

    # --- 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    save_image(scaled_image)
    return True

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    success = download_and_crop_area(
        tl_x=TOP_LEFT_TILE_X,
        tl_y=TOP_LEFT_TILE_Y,
        tl_px_x=TOP_LEFT_PIXEL_X,
        tl_px_y=TOP_LEFT_PIXEL_Y,
        br_x=BOTTOM_RIGHT_TILE_X,
        br_y=BOTTOM_RIGHT_TILE_Y,
        br_px_x=BOTTOM_RIGHT_PIXEL_X,
        br_px_y=BOTTOM_RIGHT_PIXEL_Y
    )

    if success:
        logger.info("‚úÖ –ü–†–û–¶–ï–°–° –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    else:
        logger.error("‚ùå –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–ê–ú–ò.")
        
    return success

if __name__ == "__main__":
    is_successful = main()
    exit(0 if is_successful else 1)